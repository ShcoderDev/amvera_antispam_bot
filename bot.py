import logging
import os
import asyncio
import uuid
import emoji
from html import escape
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
from aiogram.exceptions import TelegramForbiddenError, TelegramAPIError

from classify import classify_message, train, dataset

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
CONFIG = {
    "GROUP_USER_ID": int(os.getenv("GROUP_USER_ID", 1087968824)),
    "CHAT_IDS": list(map(int, os.getenv("CHAT_IDS", "").split(','))),
    "JOURNAL_CHAT_ID": int(os.getenv("JOURNAL_CHAT_ID")),
    "CHANNEL_ID": int(os.getenv("CHANNEL_ID")),
    "ALLOWED_FORWARDS": {int(os.getenv("CHANNEL_ID"))},
}

bot = Bot(os.getenv("TOKEN"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
messages_by_session = {}
message_storage = {}


# –£—Ç–∏–ª–∏—Ç—ã
def get_message_content(msg: types.Message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if msg.text:
        return msg.text
    if msg.caption:
        return msg.caption
    return "—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"


async def is_user_admin(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ['administrator', 'creator']
    except TelegramAPIError:
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start(message: types.Message):
    if message.chat.type == types.ChatType.PRIVATE:
        await message.reply("‚ùå –ë–æ—Ç –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")


@dp.message(Command("add"))
async def add_phrase(message: types.Message, command: CommandObject):
    if message.chat.id != CONFIG["JOURNAL_CHAT_ID"]:
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    if not command.args:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    message_id = str(uuid.uuid4())
    message_storage[message_id] = command.args.replace('\n', ' ').strip()

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–°–ø–∞–º", callback_data=f"add:spam:{message_id}"))
    keyboard.add(InlineKeyboardButton(text="–ù–µ —Å–ø–∞–º", callback_data=f"add:ham:{message_id}"))

    await message.reply(
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n<blockquote>{escape(command.args)}</blockquote>"
        "\n\nHAM - –Ω–µ —Å–ø–∞–º, SPAM - —Å–ø–∞–º",
        reply_markup=keyboard.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
@dp.callback_query(F.data.startswith("add:"))
async def handle_add_category(callback: CallbackQuery):
    data = callback.data.split(':')
    category, message_id = data[1], data[2]

    if (text := message_storage.get(message_id)) is None:
        return await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    confirmation_keyboard = InlineKeyboardBuilder()
    confirmation_keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_add:{category}:{message_id}")
    confirmation_keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ {category.upper()}?\n\n"
        f"<blockquote>{escape(text)}</blockquote>",
        reply_markup=confirmation_keyboard.as_markup()
    )
    await callback.answer()


@dp.callback_query(F.data.startswith("confirm_add:"))
async def confirm_adding(callback: CallbackQuery):
    data = callback.data.split(':')
    category, message_id = data[1], data[2]

    if (text := message_storage.pop(message_id, None)) is None:
        return await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    with open(dataset, 'a', encoding='utf-8') as f:
        f.write(f"\n{category} {text}")

    accuracy = train("retrain") * 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è
    await callback.message.edit_text(
        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ {category}\n\n"
        f"<blockquote>{escape(text)}</blockquote>"
        f"\n<b>–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.0f}%</b>"
    )


@dp.callback_query(F.data == "cancel_add")
async def cancel_adding(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def check_spam(message: types.Message):
    if message.chat.id not in CONFIG["CHAT_IDS"]:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if await is_user_admin(message.chat.id, message.from_user.id):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.forward_origin:
        if isinstance(message.forward_origin, types.MessageOriginChannel):
            if message.forward_origin.chat.id not in CONFIG["ALLOWED_FORWARDS"]:
                await handle_spam(message, "forward")
                return
        elif isinstance(message.forward_origin, types.MessageOriginUser):
            if message.forward_origin.sender_user.is_bot:
                await handle_spam(message, "forward_bot")
                return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —ç–º–æ–¥–∑–∏
    if check_emojis(message.text or message.caption or ""):
        await handle_spam(message, "emojis")
        return

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if classify_message(get_message_content(message)):
        await handle_spam(message, "classify")


async def handle_spam(message: types.Message, reason: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        await message.delete()
    except TelegramForbiddenError:
        logger.error(f"No rights to delete message in chat {message.chat.id}")
        return

    await send_log(message, reason)
    await notify_user(message)


async def notify_user(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    msg = await message.answer(
        f"<b>{message.from_user.full_name}</b>, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n"
        f"‚ö†Ô∏è {get_reason_description('emojis' if check_emojis(message.text) else 'classify')}"
    )
    await asyncio.sleep(15)
    await msg.delete()


def get_reason_description(reason: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è"""
    return {
        "forward": "–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
        "forward_bot": "–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Ç –±–æ—Ç–∞",
        "emojis": "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏",
        "classify": "—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ —Å–ø–∞–º"
    }.get(reason, "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞")


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
async def send_log(message: types.Message, reason: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ –∂—É—Ä–Ω–∞–ª—å–Ω—ã–π —á–∞—Ç"""
    log_text = (
        f"üö´ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{message.from_user.full_name}</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={message.from_user.id}'>{message.from_user.id}</a>\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: {get_reason_description(reason)}\n\n"
        f"<blockquote>{escape(get_message_content(message))}</blockquote>"
    )

    keyboard = InlineKeyboardBuilder()
    if reason == "classify":
        keyboard.button(text="‚ùóÔ∏è –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ", callback_data=f"false:{message.message_id}")
    keyboard.button(text="‚õîÔ∏è –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban:{message.message_id}")

    try:
        msg = await bot.send_message(
            CONFIG["JOURNAL_CHAT_ID"],
            log_text,
            reply_markup=keyboard.as_markup()
        )
        messages_by_session[message.message_id] = (message, msg, reason)
    except TelegramAPIError as e:
        logger.error(f"Error sending log: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("false:"))
async def handle_false_positive(callback: CallbackQuery):
    message_id = int(callback.data.split(':')[1])

    if (data := messages_by_session.get(message_id)) is None:
        return await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    original_msg, log_msg, reason = data
    with open(dataset, 'a', encoding='utf-8') as f:
        f.write(f"\nham {get_message_content(original_msg)}")

    accuracy = train("retrain") * 100
    await log_msg.edit_text(
        f"‚úÖ –õ–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ\n\n"
        f"<blockquote>{escape(get_message_content(original_msg))}</blockquote>"
        f"\n<b>–ù–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.0f}%</b>"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data.startswith("ban:"))
async def handle_ban(callback: CallbackQuery):
    message_id = int(callback.data.split(':')[1])

    if (data := messages_by_session.get(message_id)) is None:
        return await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    original_msg, log_msg, reason = data
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator_mention = (
            f"<a href='tg://user?id={callback.from_user.id}'>"
            f"{escape(callback.from_user.full_name)}</a>"
        )

        await bot.ban_chat_member(original_msg.chat.id, original_msg.from_user.id)
        await log_msg.edit_text(
            f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{escape(original_msg.from_user.full_name)}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            f"üëÆ‚Äç‚ôÇÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {moderator_mention}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: {escape(reason)}"
        )
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    except TelegramForbiddenError:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
    except TelegramAPIError as e:
        logger.error(f"Ban error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def check_emojis(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ 3+ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ"""
    return sum(1 for c in text if emoji.is_emoji(c)) >= 3


async def cleanup_storage():
    """–û—á–∏—â–∞–µ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"""
    while True:
        messages_by_session.clear()
        message_storage.clear()
        logger.info("Storage cleaned")
        await asyncio.sleep(86400)  # 24 —á–∞—Å–∞


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    train("init")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(cleanup_storage())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())